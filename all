
-->npm install -g create-react-app

-->npx create-react-app your-app-name

-->cd app-name

-->npm start

-------------------------------------->Pr 1 - using props class component<------------------------------

Q1)Using properties in Class Component

-------->Classprops.js---------------

import React from "react";
import { Component } from "react";
class Parent extends Component{
    render()
    {
        return(
            <div>
                <h1>This is Parent Class {this.props.address}</h1>
                <Child p_name ="Parent Name" p_age = "50" />
            </div>
        );
    }
}
class Child extends Component{
    render()
    {
        return(
            <div>
                    <h2>This is Child component {this.props.p_name} {this.props.p_age}
                    </h2>
            </div>
        );
    }
}

export {Parent,Child};

---------->App.js--------------

import {Parent,Child} from "./Classprops";

function App() {
  return (
	<div className="App">
		<Parent/>
		<Child p_name="with just the child no parent"/>
	</div>
    );
  }

export default App;



Q2 Using properties in Functional Components

-------->functional_props.js-------

import React from 'react';
export const Car = (props) => {
	return(
		<h2>I am a {props.name} !!!</h2>
	)
}
export const Product = () =>
{
return(
<div>
	<h1>Product details</h1>
	<Car name="BMW"/>
</div>
)
}

---------->App.js------------

import {Car,Product} from "./functional_props";

function App() {
  return (
	<div className="App">
		<Car/>
		<Product/>
	</div>
    );
  }
export default App;





------------------------------------>Pr 2 - using state in class components<-------------------------------------

Q.1 Updating message using state
--------->stateclass.js------------------

import React from "react";
import { Component } from "react";
class Message extends Component{
       constructor()
       {
        super()
        this.state = {
            message: "Welcome Visitors"
        }

       } 
    render()
    {
        return(
            <div>
                 <h1> {this.state.message}</h1>
                 <button onClick={()=> this.changeMessage()

                 }>Click here</button> 
            </div>
        )
    }
    changeMessage()
    {
        this.setState(
            {
                message:"Thank You for visiting!"
            }
        )
    }
}
export default Message


---------->App.js-------------------

import Message from "./stateclass";

function App() {
  return (
	<div className="App">
		<Message/>
	</div>
    );
  }

export default App;


Q2 Create a counter in Reactjs
------------->counter.js-------------------

import React, { Component } from "react";

class Counter extends Component {
    constructor() {
        super();
        this.state = {
            count: 0
        };
    }

    increment() {
        this.setState((prevState) => ({
            count: prevState.count + 1
        }), () => {
            console.log(this.state.count);
        });
    }

    incrementFour() {
        this.increment();
        this.increment();
        this.increment();
        this.increment();
    }

    render() {
        return (
            <div>
                {this.state.count} <br></br>
                <button onClick={() => this.incrementFour()}>Increment</button>
            </div>
        );
    }
}

export default Counter;

---------->App.js-------------------

import Counter from "./counter";

function App() {
  return (
	<div className="App">
		<Counter/>
	</div>
    );
  }
export default App;



---------------------------------------------->Pr 3- using state in fucntional components<---------------------------------------------


Q.1 Create Counter using useState hook

--------->counter1.js---------------

import React, { useState } from 'react';
const Count1 = () => {
  const [count, setCount] = useState(0);
  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}
export default Count1


---------->App.js----------------

import Count1 from "./counter1";
function App() {
  return (
	<div className="App">
		<Count1/>
	</div>
    );
  }

export default App;

Q2 Increment the age using useReducer hook
--------->functional_age.js-------------------

import { useReducer } from 'react';
function reducer(state, action) {
    if (action.type === 'incremented_age') {
      return {
        age: state.age + 1
      };
    }
    throw Error('Unknown action.');
  }
export default function Counter1() {
    const [state, dispatch] = useReducer(reducer, { age: 42 });
  
    return (
      <>
        <button onClick={() => {
          dispatch({ type: 'incremented_age' })
        }}>
          Increment age
        </button>
        <p>Hello! You are {state.age}.</p>
      </>
    );
  }

---------->App.js----------------

import Counter1 from "./functional_age";
function App() {
  return (
      <div className="App">
  <Counter1/>
  </div>
    );
  }
export default App;


Q.3 Perform incrementation & decrementation using useReducer hook

---------->incre_decr.js---------------

import { useReducer } from 'react';
const initialState = {count: 0};
function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return {count: state.count + 1};
    case 'decrement':
      return {count: state.count - 1};
    default:
      throw new Error();
  }
}
function Incredecre() {
  const [state, dispatch] = useReducer(reducer, initialState);
  return (
    <div>
      Count: {state.count} <br></br>
      <button onClick={() => dispatch({type: 'increment'})}>Increment by 1</button><br></br>
      <button onClick={() => dispatch({type: 'decrement'})}>Decrement by 1</button>
    </div>
  );
}
export default Incredecre

----------->App.js---------------

import Incredecre from "./incre_decr";
function App() {
  return (
      <div className="App">
  <Incredecre/>
  </div>
    );
  }
export default App;

Q.4 Perform increment decrement  and reset operation using useReducer hook
---------->incrdecr.js-----------

import { useReducer } from 'react';
const initialState = 0;
const reducer = (state, action) => {
    switch (action) {
      case "add":
        return state + 1;
      case "subtract":
        return state - 1;
      case "reset":
        return 0;
      default:
        throw new Error("Error");
    }
  };
  const Arithmetic = () => {
    // Initialising useReducer hook
  const [count, dispatch] = useReducer(reducer, initialState);
  return (
    <div>
      <h2>{count}</h2>
      <button onClick={() => dispatch("add")}>
        Increment
      </button>
      <button onClick={() => dispatch("subtract")}>
        decrement
      </button>
      <button onClick={() => dispatch("reset")}>
        reset
      </button>
    </div>
  );
};
 
export default Arithmetic;

----------App.js------------------

import Arithmetic from "./incrdecr";
function App() {
  return (
      <div className="App">
  <Arithmetic/>
  </div>
    );
  }
export default App;



-------------------------->Pr 4- Component Lifecycle<---------------------------

----->mount.js----------

import React from 'react'

class Header extends React.Component {
    constructor(props) {
      super(props);
      this.state = {favoritecolor: "red"};
    }
    componentDidMount() {
      setTimeout(() => {
        this.setState({favoritecolor: "yellow"})
      }, 3000)
    }
    render() {
      return (
        <h1>Ths is Mount: My Favorite Color is {this.state.favoritecolor}</h1>
      );
    }
  }
export default Header

---------->update.js---------------

import React from "react";
class Update extends React.Component {
    constructor(props) {
      super(props);
      this.state = {favoritecolor: "red"};
    }
    shouldComponentUpdate() {
      return false;
    }
    changeColor = () => {
      this.setState({favoritecolor: "blue"});
    }
    render() {
      return (
        <div>
        <h1>Update: My Favorite Color is {this.state.favoritecolor}</h1>
        <button type="button" onClick={this.changeColor}>Change color</button>
        </div>
      );
    }
  }

class Getsnapshot extends React.Component {
    constructor(props) {
      super(props);
      this.state = {favoritecolor: "red"};
    }
    componentDidMount() {
      setTimeout(() => {
        this.setState({favoritecolor: "yellow"})
      }, 1000)
    }
    getSnapshotBeforeUpdate(prevProps, prevState) {
      document.getElementById("div1").innerHTML =
      "Before the update, the favorite was " + prevState.favoritecolor;
      return null;
    }
    componentDidUpdate() {
      document.getElementById("div2").innerHTML =
      "The updated favorite is " + this.state.favoritecolor;
    }
    render() {
      return (
        <div>
          <h1>My Favorite Color is {this.state.favoritecolor}</h1>
          <div id="div1"></div>
          <div id="div2"></div>
        </div>
      );
    }
  }
export {Getsnapshot,Update};

----------------->unmount.js----------------

import { render } from "@testing-library/react"; import React from "react";

class Unmount extends React.Component {
  constructor() {
    super(); this.state = {
      delete: false,
    };
  }
  render() {
    return (
      <div>
        <h1>User List</h1>
        <button onClick={() => this.setState({ delete: !this.state.delete })}> Delete Users</button>
        {this.state.delete ? null : <User />}
      </div>
    );
  }
}
class User extends React.Component {
  componentWillUnmount() {
    alert('Delete user successfully!');
  }
  render() {
    return (
      <div>

        <h3>UserName: Rahul</h3>
        <h3>Email: Rahul@gmail.com</h3>
      </div>
    )
  }
}
export default Unmount;

------------>App.js-------------

import Header from './mount';
import {Update,Getsnapshot} from './update';
import Unmount from './unmount';

function App() {
  return (
    <div className="App">
      <Header/>
      <Update/>
      <Getsnapshot/>  
      <Unmount/>
    </div>
  );
}

export default App;



----------------------->Pr 5 Event Handling-----------------------


Define a form submission event handler is using an arrow function that prevents the default form submission behavior using **event.preventDefault()**. Update the input value using the **handleInputChange** function, which is called on every input change event.
------->eventHandling.js------

import React, {useState} from 'react';

function Pr () {
    const [inputValue,setInputValue] = useState('');
    const handleSubmit = (event)=>{
        event.preventDefault();
        console.log('Submitted Value:', inputValue);
    };
    const handleInputChange = (event) => {
        setInputValue(event.target.value);
    };
    return(
        <form onSubmit={handleSubmit}>
            <input type='text' value={inputValue} onChange={handleInputChange}/>
            <button type="submit">Submit</button>
            <h2>submitted value {inputValue}</h2> 
        </form>
    );
}
export default Pr;



Define a keydown event handler is using an arrow function that checks if the Enter key is pressed and logs the input value to the console. Update the the input value using the **handleInputChange**function, which is called on every input change event.
--------->eventHandling2.js------

import React,{useState} from 'react';
function KeyDown() {
    const [inputValue, setInputValue] = useState('');
    const handleKeyDown = (event) => {
        if(event.key==="Enter"){
            console.log('Submitted value:',inputValue);
        }
    };
    const handleInputChange = (event) => {
        setInputValue(event.target.value);
    };
    return(
        <div>
            <input type='text' value={inputValue} onKeyDown={handleKeyDown}
            onChange={handleInputChange}/>
            <p>{inputValue}</p>
        </div>
    )
}

export default KeyDown;


Take an input field to add an element into array using states.
------->eventHandling3.js------

import React from "react";
import { useState } from "react";

function MultiValuesArray(){
    const friendsArray = ['Earth','Bright','Jeff',"Mew"]
    const [friends,setFriends] = useState(friendsArray);

    const handleFucntion = () => {
        const newFriend = document.getElementById("friend").value
        setFriends([...friends,newFriend])
    }
    return(
        <div>
            <h1>List</h1>
            <ul>{friends.map((f,index) => <li key={index}> {f} </li>)}
            </ul>
            <input type="text" id="friend" placeholder="Enter friend name" />
            <button onClick={handleFucntion}> Add Values</button>
        </div>
    )
}

export default MultiValuesArray;


Take a button to add users, remove user and add user after a specific element
-------------->eventHandling4.js--------

import React, { useState } from "react";
function AddRemoveArr(){
    const [users,setUsers] = useState([
        {id:1,username:"User 1"},
        {id:4,username:"User 2"},
        {id:3,username:"User 3"},
    ]);
    const addUser = () => {
        const newUser = {
            id:`${users.length + 1}`,
            username:`User ${users.length + 1}`
        };
        const newUsers = [...users,newUser];
        setUsers(newUsers)
    };

    const removeUser = (index) => () =>{
        const newUsers = [...users];
        console.log(newUsers);
        newUsers.splice(index,1);
        setUsers(newUsers);        
    }

    const addAfter = (index) => () => {
        const newUser = {
            id:`${users.length + 1}`,
            username:`User ${users.length + 1}`
        }
        const newUsers =[...users];
        newUsers.splice(index + 1,0,newUser)
        console.log(newUser)

        setUsers(newUsers);
    };
    return(
    <>
    <button onClick={addUser}>Add User</button>
    {users.map((user,index)=>(
        <div className="user" key={user.id}>
            {user.username}
        <button onClick={removeUser(index)}>Remove User</button>
        <button onClick={addAfter(index)}>Add immediate next User</button>
        </div>
    ))}
    </>)   
}
export default AddRemoveArr;

-------->App.js-----------

import './App.css'
import Pr5i from './eventHandling'
import KeyDown from './eventHandling2'
import MultiValuesArray from './eventHandling3'
import AddRemoveArr from './eventHandling4'

function App() {
  return (
    <>
    <Pr5i/>
    <KeyDown/>
    <MultiValuesArray/>
    <AddRemoveArr/>
     </>
  )
}
export default App


------------------------>Pr 6 useEffect and useRef--------------------------


Countdown timer with useEffect
-------->TimerUseEffect.js----


import React, {useState,useEffect} from 'react'
function Pr(){
    const [timeRemaining,setTimeReamining] = useState(10);
    useEffect(()=>{
        if(timeRemaining <=0){
            return;
        }
        const timerId = setInterval(()=>{
            setTimeReamining((prevTime) => prevTime - 1);
            console.log('remaining time:',timeRemaining)
        },1000);
        return() =>{
            console.log('Clearing up the time',timeRemaining)
            clearInterval(timerId);
        };
    },[timeRemaining]);

    return(
        <div>
            <p>Time Remaining: {timeRemaining}</p>
        </div>
    )
}

export default Pr;


Window Resize Listener using useEffect
------->WindowResize.js----

import React,{useState,useEffect} from 'react'
function WindowResizeComp(){
    const [windowSize,setWindowSize] = useState({width:window.innerWidth,height:window.innerHeight});

    useEffect(()=>{
        const handleResize = () =>{
            setWindowSize({width: window.innerWidth, height: window.innerHeight});
        };
        window.addEventListener('resize',handleResize);
        return()=>{
            window.removeEventListener('resize',handleResize);
        };
    },[]);

    return(
        <div>
            <p>Window size: {windowSize.width} x {windowSize.height}</p>
        </div>
    )
}
export default WindowResizeComp;


Form Input Validation with useEffect
----->InputValidation.js--------

import React, { useEffect, useState } from "react";
const FormInputValidationComponent = () =>{
 const [inputValue,setInputValue] = useState('');
 const [isValid,setIsValid] = useState(true);
 useEffect(()=>{
    console.log('Input value changed:',inputValue);

    const isValidInput = inputValue.length > 5;
    setIsValid(isValidInput);
    },[inputValue]);
    
    const handleInputChange = (event) => {
        setInputValue(event.target.value)
    }

    const handleSubmit = (event) =>{
        event.preventDefault();
        if(isValid){
            console.log('From submitted with valid input:', inputValue);
        }
        else{
            console.log('Form submission blocked due to invalid input:',inputValue);
        }
    };

    return(
        <div>
            <form onSubmit={handleSubmit}>
                <label>Enter Value</label>
                <input
                type="text"
                value={inputValue}
                onChange={handleInputChange}
                style={{borderColor: isValid?'green':'red'}}
                />
                <button type="submit">Submit</button>
            </form>
            {!isValid && <p style={{color:'red'}}>Input must have more than 5 characters</p>}
        </div>
    )
}
export default FormInputValidationComponent;



Data Fetching using useEffect
--------->DataFetching.js---------

import React, { useEffect, useState } from "react";

function DataFetchingComponent(){
    const [posts,setPosts] =  useState([]);
    useEffect(()=>{
        const fetchData = async () =>{
            const response = await fetch('https://jsonplaceholder.typicode.com/posts');
            
            const data = await response.json();
            setPosts(data);
        };
        fetchData()
    },[]);
    return(
        <div>
            <h1>Data Fetched</h1>
            {posts.map((post) =>
                <div>
                    {post.id}<br/>
                    Title:<h3>{post.title}</h3>
                    Body:<p>{post.body}</p>
                </div>
            )
            }
        </div>
    )
}
export default DataFetchingComponent;

------->App.jsx-----

import './App.css'
import DataFetchingComponent from './DataFetching'
import FormInputValidationComponent from './InputValidation'
import Pr6i from './TimerUseEffect'
import WindowResizeComp from './WindowResize'


function App() {
  return (
    <>
   <Pr6i/>
   <WindowResizeComp/>
    <FormInputValidationComponent/>
    <DataFetchingComponent/>
     </>
  )
}

export default App



------------------------------>Pr 7 useRef<------------------------

Develop a React application that includes a form with input fields for username and email address. Implement functionality to automatically focus on the username input field when the page loads.

------->FocusInput.js-------

import React, { useEffect, useRef } from 'react';
export default function FocusInput() {
  const inputRef = useRef(null);
  useEffect(() => {
    inputRef.current.focus();
  }, []);
  const focusInput = () => {
    inputRef.current.focus();
  };
  return (
    <div>
      <h1>Focus Input Field</h1>
      Username: <input type="text" ref={inputRef} />
      <button onClick={focusInput}>Focus Input</button>
      Email: <input type="text" />
    </div>
  ); 
}



Develop a React component called FormWithRef that implements a form with input fields for username and email. Use the useRef hook to persist mutable values for these input fields and to store the submitted data. The form should log the submitted data to the console when the user submits the form.
------->FormWithRef.js-----

import React, { useRef } from 'react';
function FormWithRef() {
    const usernameRef = useRef('');
    const emailRef = useRef('');
    const submittedDataRef = useRef(null);
    const handleSubmit = (event) => {
        event.preventDefault();
  